Описание проекта
DrinksShop — веб-приложение, разработанное для управления продажей напитков. 
Пользователи могут просматривать доступные напитки, добавлять их в корзину и оформлять заказы. 
Проект реализует основные функции интернет-магазина(просмотр товаров, добавление товаров в корзину, оплату), 
обеспечивая удобный интерфейс для пользователей.

Технологии
В проекте использовались следующие технологии:
- Backend:
	- C#/.Net 8.
	- ASP.NET Core MVC.
	- Entity Framework 8.
	- PostgreSQL 17.
- Frontend:  
  - HTML5, CSS3, JavaScript  
  - AJAX (jQuery) для динамического обновления корзины.
  - Bootstrap 5.

Модели данных
В проекте представленно несколько моделей данных двух типов:
Entities(сущности, с которыми работает проект и на основе которых созданны таблицы базы данных):
	Brand - производитель напитка.
	Coin - монеты для оплаты.
	Order - заказ пользователя.
	OrderItem - позиция в заказе.
	Product - напиток.
ViewModel(модели созданные локально для представлений с целью оюлегчения написания их логики):
	CartItem - товар в корзине.
	PaymentRequest - данные для оплаты.
	PaymentResult - результат оплаты.

Контроллеры
CartController:
	CartController() - Инициализирует зависимости (сервисы корзины, продуктов и БД).
	Index() - Отображает страницу корзины.
	AddItem() - Добавляет товар в корзину (AJAX-запрос).
	RemoveItem() - Удаляет товар из корзины.
	UpdateItem() - Обновляет количество товара.
	Clear() - Очищает корзину.
	GetCount() - Переход к оплате.
	IncreaseQuantity() - Увеличивает количество товара на 1 (AJAX).
	DecreaseQuantity() - Уменьшает количество товара на 1 (AJAX).
	SetQuantity() - Устанавливает точное количество товара (AJAX).
	GetUpdatedCartData() - Генерирует JSON с актуальными данными корзины.
PaymentController:
	PaymentAPIController(API для обработки платежей) - Внедряет зависимости.
	ProcessPayment() - Обрабатывает платеж, принимая монеты от пользователя и возвращая сдачу.
	PaymentController() - Внедряет AppDbContext для доступа к базе данных (заказы).
	Success() - Показывает страницу с деталями заказа после успешной оплаты.
ProductsController:
	ProductsController() - Инициализирует зависимости.
	Index() - Главная страница продуктов с возможностью фильтрации.

Сервисы
CartService:
	CartService() - Внедряет зависимость.
	GetCart() - Получает текущую корзину из сессии.
	SaveCart() - Сохраняет корзину в сессию.
	AddToCart() - Добавляет товар в корзину.
	RemoveFromCart() - Удаляет товар из корзины.
	UpdateQuantity() - Обновляет количество конкретного товара.
	ClearCart() - Очищает корзину полностью.
	GetCartCount() - Возвращает общее количество товаров в корзине.
	GetCartTotal() - Возвращает общую сумму корзины.
	IncreaseQuantity() - Увеличивает количество товара.
	DecreaseQuantity() - Уменьшает количество товара (но не меньше 1).
	SetQuantity() - Устанавливает точное количество товара.
IProductService:
	IProductService() - редоставляет абстракцию для:
    				Получения информации о продуктах.
    				Фильтрации продуктов по различным критериям.
    				Работы с брендами продуктов.
    				Получения ценового диапазона продуктов.
	GetProductsAsync() - Основной метод для получения списка продуктов с возможностью фильтрации.
	GetBrandsAsync() - Получение списка всех доступных брендов.
	GetPriceRangeAsync() - Получение минимальной и максимальной цены среди всех продуктов.
	GetProductAsync() - Получение конкретного продукта по его идентификатору.
PaymentService:
	PaymentService() - Внедряет зависимость AppDbContext для работы с базой данных.
	ProcessPayment() - Обрабатывает платёж, проверяет доступность товаров, рассчитывает сдачу и создаёт заказ. 
	Логика работы метода:
		1.Начало транзакции.
		2.Проверка доступности товаров.
		3.Расчёт сумм.
		4.Проверка достаточности средств.
		5.Расчёт сдачи.
		6.Обновление данных.
		7.Создание заказа.
		8.Обработка ошибок.
ProductService:
	ProductService() - Внедряет зависимость AppDbContext для работы с базой данных.
	GetProductsAsync() - Получает список продуктов с возможностью фильтрации.
	Логика работы:
		1.Создаёт базовый запрос с включением информации о брендах.
		2.Применяет фильтры (если они указаны):
			По бренду.
			По минимальной цене.
			По максимальной цене.
		3. Выполняет запрос и возвращает результаты.
	GetBrandsAsync() - Получает список всех брендов.
	GetPriceRangeAsync() - Получает минимальную и максимальную цену среди всех продуктов.
	Логика работы:
		1.Проверяет наличие продуктов.
		2.Если продукты есть - вычисляет минимальную и максимальную цену.
		3.В случае ошибки возвращает значения по умолчанию.
	GetProductAsync() - Если продукты есть - вычисляет минимальную и максимальную цену.	

Контекст базы данных:
	AppDbContext():
		AppDbContext() - Принимает конфигурационные параметры для настройки контекста БД.
    				 Передаёт базовому классу DbContext параметры подключения.
				 Позволяет внедрять контекст через DI-контейнер ASP.NET Core.
		DbSet() - Каждое свойство DbSet представляет таблицу в базе данных:
    				Products - таблица напитков.
    				Brands - таблица брендов напитков.
    				Coins - таблица монет для оплаты.
    				Orders - таблица заказов.
    				OrderItems - таблица позиций заказа.
		OnModelCreating() - заполняет созданные ранее таблицы начальными данными.

Представления:
	Cart:
		Index.cshtml - представление корзины.
	Payment:
		Index.cshtml - представление оплаты.
		Success.cshtml - представление успешной оплаты с данными заказа.
	Product:
		Index.cshtml - представление каталога товаров.
